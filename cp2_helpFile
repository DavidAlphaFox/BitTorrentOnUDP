#1
Peer.request_Queue (to iteratively send GET request)

#2
Peer.send_Window (data sending window for each peer)

#3 enpoll () add new GET queue into Peer.request_Queue

typedef down_conn_s {
	chunk_t* chunk;
	bt_peer_t* provider;
	queue_t* get_queue;
	int next_pkt; // next expected pkt number
	timer last_time;
}down_conn_t;

typedef up_conn_s {
	bt_peer_t* receiver;
	queue_t* pkt_Queue;
	int last_avaible;
	int last_ack;
	int duplicate;
	int windows_size;
}up_conn_t;

typedef pool_s {
	connection;
	num;
	
}pool_t;

download_pool;
upload_pool_t;

// when recieve GET:
check whether that connection is inside pool
if not
	if( conn_num >= 10) {
		//denied
	} else {
		new connection:
		receiver = peer;
		make data pkt queue;
		last_ack = 0;
		duplicate = 0;
		windowsize = 8;
		last_available = 1;
		last_sent = 0;
	}
else
	update connection:
		make data pkt queue;
		last_ack = 0
		duplicate = 0;
		last_available = 1;
		last_sent = 0;

while( l_available - l_ack <= win_size) {
	send(l_available);
	l_available++;
	l_sent++;
}//loop_send(connection*);

// When recieve Data:
if(seq == next_pkt) {
	// right way
	make_ack(next_pkt);
	send_ack();
	next_pkt++;
	store_data() {
		// to do: initialize int cur_size;
		int data_size = pkt->header.packet_len - pkt->header.header_len;
		if (cur_size + data_size > CHUNK_SIZE) {
			print error and drop
		}
		memcpy(data+cur_size,pkt->data,data_size);
		cur_size += data_size; 
	}
	if (cur_size == CHUNK_SIZE) {
		if (shahash(data) == hash) {
		 	// hash is right
		 	mark chunk finished
		} else {
			// hash is wrong drop
			print error
		}
	}
} else {
	// drop and send duplicate ack
	make_ack(next_pkt-1);
	send_ack();
}


# STAGE_SLOW_START 0
# STAGE_CONGESTION_AVOIDENCE 1

// When recieve Ack:
if( l_ack +1 == incoming_ack ) {
	l_ack++;
	switch(stage) {
		case STAGE_SLOW_START: {
			cwnd+=1;
			loop_send(connection*);
			break;
		}
		case STAGE_CONGESTION_AVOIDENCE: {
			cwnd += 1/cwnd;
			loop_send(connection*);
			break;
		}
		default: {
			print error;
			break;
		}
	}
}else if(l_ack == incoming_ack) { 
	// duplicate
	duplicate++;
	if( duplicate >=3 ) {
		
		ssthresh = max(cwnd/2,2); //to do, initilize sstresh tp 64
		cwnd = 1;
		
		// retransmit lost pkt
		l_available = l_ack+1;
		loop_send(connection*);
		
		duplicate = 0;  // reset duplicate
	}
}
}


// when recieve denied 
// to do:
	



